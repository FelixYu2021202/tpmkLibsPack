export namespace utl {
    /**
     * Same as NodeJS.Dict.
     * @template {any} T The mapped type.
     */
    export type Dict<T> = {
        [id: string]: T;
    };
    /**
     * Same as NodeJS.Record.
     * @template {string} K The type of keys.
     * @template {any} T The mapped type.
     */
    export type Map<K extends string, T> = {
        [id in K]: T;
    };
    /**
     * A simple mapping function.
     * @template {any} U The type of preimages.
     * @template {any} T The type of images.
     */
    export type F<U, V> = (p: U) => V;

    /**
     * Luogu-styled data returned when querying for a page.
     */
    export interface Wrapped<T> {
        count: number;
        perPage: number;
        result: T[];
    }
}

/**
 * The Luogu types namespace.
 */
export namespace lg {

    /**
     * The data returned while querying for a random user.
     */
    export interface User {
        avatar: string;
        background: string;
        badge?: string;
        ccfLevel: number;
        color: string;
        isAdmin: boolean;
        isBanned: boolean;
        name: string;
        slogan: string;
        uid: number;
    }

    /**
     * Luogu Problemset Types.
     */
    export type ProblemType = "P" | "B" | "CF" | "AT" | "SP" | "UVA";

    /**
     * The data returned while querying for the current user.
     */
    export interface CurrentUser extends User {
        eloValue: number;
        followingCount: number;
        followerCount: number;
        ranking: number;
        blogAddress: string;
        unreadMessageCount: number;
        unreadNoticeCount: number;
        verified: boolean;
    }

    /**
     * Contest related APIs.
     */
    export namespace lgc {
        /**
         * Contest mode.
         * 
         * Not finished.
         */
        export type Mode = "icpc" | "ioi";

        /**
         * One's score of a particular problem.
         */
        export interface UserProblemScore {
            score: number;
            runningTime: number;
        }

        /**
         * One's score of a particular contest.
         * @member score The sum of the scores of problems.
         * @member runningTime The sum of the running times of problems.
         */
        export interface UserScore extends UserProblemScore {
            /**
             * A map to store problem scores.
             */
            details: utl.Dict<UserProblemScore>;
            user: User;
        }

        /**
         * The data returned when querying for a contest's scoreboard using api
         */
        export interface ContestScoreboard {
            firstBloodUID: utl.Dict<number>;
            scoreboard: utl.Wrapped<UserScore>;
            /**
             * It's your score.
             */
            userScore: UserScore;
            /**
             * It's your rank.
             */
            userRank: number;
        }

        /**
         * **NOT type of standard Luogu data**
         * 
         * A type generated by contest scoreboard parser(./lcp.ts).
         * 
         * It stores acception and submission data of a contest problem.
         */
        export interface ParsedProblemStatus {
            submitted: number;
            accepted: number;
            firstBlood: number;
        }

        /**
         * **NOT type of standard Luogu data**
         * 
         * A type generated by contest scoreboard parser(./lcp.ts).
         * 
         * It stores extra data of a contest.
         */
        export interface ParsedContestScoreboard extends ContestScoreboard {
            problems: string[];
            problemStatus: utl.Dict<ParsedProblemStatus>;
            /**
             * The rank which consists of uid.
             */
            shortRank: number[];
            /**
             * Total contestants who participated(submitted) in this contest.
             */
            participant: number;
            /**
             * The title of each problem.
             */
            problemTitle: utl.Dict<string>;
        }
    }

    /**
     * Types of _feInjection
     */
    export namespace fe {
        /**
         * Types of _feInjection.currentTheme
         */
        export interface FeTheme {
            id: number;
            header: {
                imagePath: string;
                color: [number, number, number, number][];
                blur: number;
                brightness: number;
                degree: number;
                repeat: number;
                position: [number, number];
                size: [number, number];
                type: number;
                __CLASS_NAME: string;
            };
            sideNav: {
                logoBackgroundColor: [number, number, number, number];
                color: [number, number, number, number];
                invertColor: boolean;
                __CLASS_NAME: string;
            };
            footer: {
                imagePath: string;
                color: [number, number, number, number][];
                blur: number;
                brightness: number;
                degree: number;
                repeat: number;
                position: [number, number];
                size: [number, number];
                type: number;
                __CLASS_NAME: string;
            }
        }
        /**
         * Types of _feInjection.currentData
         */
        export namespace FeData {
            /**
             * Empty. Nothing valuable stored.
             */
            export interface Empty {
                id: number;
                author: User;
                time: number;
            }
            /**
             * Problem test samples
             */
            export interface Sample extends Array<string> {
                0: string;
                1: string;
                length: 2;
            }
            /**
             * The data returned when the target problem is included in lists e.g. contest problem list.
             */
            export interface OriginProblem {
                pid: string;
                title: string;
                difficulty: number;
                fullScore: number;
                type: ProblemType;
            }
            /**
             * The data returned when querying for random problem.
             */
            export interface UndetailedProblem extends OriginProblem {
                accepted: boolean;
                submitted: boolean;
            }
            /**
             * The data returned when querying for a problem page.
             */
            export interface Problem extends UndetailedProblem {
                background: string;
                description: string;
                inputFormat: string;
                outputFormat: string;
                samples: Sample[];
                hint: string;
                provider: User;
                attachments: [];
                canEdit: boolean;
                limits: {
                    time: number[];
                    memory: number[];
                };
                showScore: boolean;
                score: number;
                stdCode: string;
                tags: number[];
                wantsTranslation: boolean;
                totalSubmit: number;
                totalAccepted: number;
                flag: number;
            }
            /**
             * The data returned when the target contest is included in lists.
             */
            export interface UndetailedContest {
                id: number;
                name: string;
                startTime: number;
                endTime: number;
            }
            /**
             * The data returned when querying for a contest page.
             */
            export interface Contest extends UndetailedContest {
                description: string;
                totalParticipants: number;
                eloDone: boolean;
                canEdit: boolean;
                ruleType: number;
                visibilityType: number;
                invitationCodeType: number;
                rated: boolean;
                eloThreshold?: any;
                host: User;
                problemCount: number;
            }
            /**
             * The content of contest problem lists.
             */
            export interface ContestProblem {
                score: number;
                problem: OriginProblem;
                submitted: boolean;
            }
            /**
             * The content of forum lists.
             */
            export interface Forum {
                name: string;
                type: number;
                slug: string;
                color: string;
            }
            /**
             * The content of discussion lists.
             */
            export interface UndetailedDiscussion {
                id: number;
                title: string;
                forum: {
                    id: number;
                    name: string;
                    slug: string;
                }
            }
            /**
             * The data returned when querying for discussion page.
             */
            export interface Discussion {
                author: User;
                time: number;
                forum: Forum;
                topped: boolean;
                valid: boolean;
                recentReply: Empty;
            }
            /**
             * The data returned when the target team is included in lists
             */
            export interface UndetailedTeam {
                id: number;
                name: string;
                isPremium: boolean;
            }
            /**
             * The data returned when querying for the group of a joined team.
             */
            export interface TeamGroup {
                id: number;
                name: string;
                no: number;
            }
            /**
             * The complete data of a team.
             */
            export interface Team {
                team: UndetailedTeam;
                group: TeamGroup;
                user: User;
                type: number;
                permission: number;
            }
            /**
             * Gu Zhi
             */
            export interface UserRating {
                contestRating: number;
                socialRating: number;
                practiceRating: number;
                basicRating: number;
                prizeRating: number;
                calculateTime: number;
                user: User;
                rating: number;
            }
            /**
             * The data returned when querying Gu Zhi
             */
            export interface DetailedUserRating extends UserRating {
                id: number;
            }
            /**
             * User's prizes in real world.
             */
            export interface Prize {
                year: number;
                contestName: string;
                prize: string;
            }
            /**
             * The highest elo rating.
             */
            export interface MaxElo {
                rating: number;
                time: number;
                latest: boolean;
            }
            /**
             * The latest elo rating
             */
            export interface LatestElo extends MaxElo {
                contest: UndetailedContest;
                latest: true;
            }
            /**
             * The data returned when querying for elo ranking.
             */
            export interface DetailedElo extends LatestElo {
                userCount: number;
                prevDiff: number;
                user: User;
            }
            /**
             * The data returned when querying for elo ranking.
             */
            export interface ComparedDetailedElo extends DetailedElo {
                previous: DetailedElo;
            }
            /**
             * The data returned when querying for a user's page.
             */
            export interface DetailedUser extends CurrentUser {
                rating: UserRating;
                organization?: string;
                email: string;
                phone: string;
                registerTime: number;
                introduction: string;
                prize: Prize[];
                elo: LatestElo;
                userRelationship: number;
                reverseUserRelationship: number;
                passedProblemCount: number;
                submittedProblemCount: number;
            }
            /**
             * The data returned when querying theme store.
             */
            export interface DetailedTheme extends FeTheme {
                name: string;
                type: string;
                author: User;
                updateTime: number;
                userCount: number;
            }
            /**
             * The data returned when querying image upload page.
             */
            export interface Image {
                thumbnailUrl: string;
                url: string;
                id: string;
                provider: User;
                uploadTime: number;
                size: number;
            }
            /**
             * The data returned when querying pastes page.
             */
            export interface Paste {
                data: string;
                id: string;
                user: User;
                time: number;
                public: boolean;
            }
        }
        /**
         * Types of _feInjection.currentData
         */
        export interface FeData {
            /**
             * The data returned when querying for a problem page.
             */
            ProblemShow: {
                problem: FeData.Problem;
                contest?: FeData.UndetailedContest;
                discussions: FeData.UndetailedDiscussion[];
                bookmarked: boolean;
                vjudgeUsername?: string;
                recommendations: FeData.UndetailedProblem[];
                lastLanguage: number;
                lastCode: string;
                privilegedTeams: FeData.UndetailedTeam[];
                userTranslation?: string;
            };
            /**
             * The data returned when querying for a contest page.
             */
            ContestShow: {
                contest: FeData.Contest;
                contestProblems: FeData.ContestProblem[];
                isScoreboardFrozen: boolean;
                accessLevel: number;
                joined: boolean;
                userElo?: number;
            };
            /**
             * The data returned when querying for a user's page.
             */
            UserShow: {
                user: FeData.DetailedUser;
                eloMax: FeData.MaxElo;
                passedProblems: FeData.OriginProblem[];
                submittedProblems: FeData.OriginProblem[];
                teams: FeData.Team[];
            };
            /**
             * The data returned when querying homepage.
             */
            Excited: {
                shortHeader: boolean;
                pageName: string;
                title: string;
            };
            /**
             * The data returned when querying theme store.
             */
            ThemeList: {
                themes: utl.Wrapped<FeData.DetailedTheme>;
            };
            /**
             * The data returned when querying image upload page.
             */
            ImageList: {
                spaceUsage: number;
                spaceLimit: number;
                images: utl.Wrapped<FeData.Image>;
            };
            /**
             * The data returned when querying pastes page.
             */
            PasteList: {
                pastes: utl.Wrapped<FeData.Paste>;
            };
            /**
             * The data returned when querying Gu Zhi
             */
            RankList: {
                rankList: utl.Wrapped<FeData.DetailedUserRating>;
            };
            /**
             * The data returned when querying for elo ranking.
             */
            RankElo: {
                ranking: utl.Wrapped<FeData.ComparedDetailedElo>;
            };
            /**
             * The data returned when querying for discussion list.
             */
            DiscussList: {
                forum: FeData.Forum;
                publicForums: FeData.Forum[];
                posts: utl.Wrapped<FeData.Discussion>;
                canPost: boolean;
            }
        }
        /**
         * The type of _feInjection
         */
        export interface FeInjection<T extends keyof FeData> {
            code: number;
            currentTemplate: T;
            currentData: FeData[T];
            currentTitle: string;
            currentTheme: FeTheme;
            currentTime: number;
            currentUser: CurrentUser;
        }
    }
}
